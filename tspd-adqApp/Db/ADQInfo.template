##
## Copyright (c) 2018 Cosylab d.d.
## This software is distributed under the terms found
## in file LICENSE.txt that is included with this distribution.
##

# # # # # # # # # # # # # # # # # # # # # #
#                                         #
#       Information about ADQ device      #
#                                         #
# # # # # # # # # # # # # # # # # # # # # #

record(waveform,"$(P):LOGMSG") {
    field(DESC, "Message log")
    field(FTVL,"CHAR")
    field(NELM,"512")
    field(SCAN,"I/O Intr")
    field(DTYP,"asynInt8ArrayIn")
    field(INP,"@asyn($(PORT):$(INFO), 0) LogMsg")
    field(PINI, "YES")
}

record(waveform, "$(P):PRODNAME") {
    field(DESC, "Product name of the device")
    field(FTVL, "CHAR")
    field(NELM, 32)
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt8ArrayIn")
    field(INP,  "@asyn($(PORT):$(INFO), 0) ProdName")
    field(PINI, "YES")
}

record(waveform, "$(P):PRODSERIAL") {
    field(DESC, "Serial number of the device")
    field(FTVL, "CHAR")
    field(NELM, 32)
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt8ArrayIn")
    field(INP,  "@asyn($(PORT):$(INFO), 0) ProdSerial")
    field(PINI, "YES")
}

record(longin, "$(P):PRODID") {
    field(DESC, "Product ID of the device")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) ProdID")
    field(PINI, "YES")
}

record(longin, "$(P):PRODTYPE") {
    field(DESC, "Type of the device")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) ProdType")
    field(PINI, "YES")
}
    
record(waveform, "$(P):PRODOPT") {
    field(DESC, "Option of the device")
    field(FTVL, "CHAR")
    field(NELM, 32)
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt8ArrayIn")
    field(INP,  "@asyn($(PORT):$(INFO), 0) ProdOpt")
    field(PINI, "YES")
}

record(mbbi, "$(P):ISALIVE") {
    field(DESC, "Is the digitiser still communicable?")
    field(ZRVL, 0)
    field(ZRST, "Fail")
    field(ONVL, 1)
    field(ONST, "OK")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) isAlive")
    field(PINI, "YES")
}

record(longin, "$(P):TEMPLOCAL") {
    field(DESC, "Local temperature")
    field(EGU,  "C")
    field(HIHI, "105")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) TempLocal")
    field(PINI, "YES")
}

record(longin, "$(P):TEMPADC-1") {
    field(DESC, "ADC1 temperature")
    field(EGU,  "C")
    field(HIHI, "105")
    field(HIGH, "100")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) TempADC-1")
    field(PINI, "YES")
}

record(longin, "$(P):TEMPADC-2") {
    field(DESC, "ADC2 temperature")
    field(EGU, "C")
    field(HIHI, "105")
    field(HIGH, "100")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) TempADC-2")
    field(PINI, "YES")
}

record(longin, "$(P):TEMPFPGA") {
    field(DESC, "FPGA temperature")
    field(EGU,  "C")
    field(HIHI, "95")
    field(HIGH, "90")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) TempFPGA")
    field(PINI, "YES")
}

record(longin, "$(P):TEMPDCDC2A") {
    field(DESC, "Diode temperature")
    field(EGU, "C")
    field(HIHI, "105")
    field(HIGH, "100")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) TempDCDC2A")
    field(PINI, "YES")
}

record(longin, "$(P):TEMPDCDC2A") {
    field(DESC, "Diode temperature")
    field(EGU,  "C")
    field(HIHI, "105")
    field(HIGH, "100")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) TempDCDC2A")
    field(PINI, "YES")
}

record(longin, "$(P):TEMPDCDC2B") {
    field(DESC, "Diode temperature")
    field(EGU,  "C")
    field(HIHI, "105")
    field(HIGH, "100")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) TempDCDC2B")
    field(PINI, "YES")
}

record(longin, "$(P):TEMPDCDC1") {
    field(DESC, "Diode temperature")
    field(EGU,  "C")
    field(HIHI, "105")
    field(HIGH, "100")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) TempDCDC1")
    field(PINI, "YES")
}

record(longin, "$(P):TEMPRSVD") {
    field(DESC, "Diode temperature")
    field(EGU,  "C")
    field(HIHI, "105")
    field(HIGH, "100")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) TempRSVD")
    field(PINI, "YES")
}

record(mbbi, "$(P):PLL1_LOCK_LOST") {
    field(DESC, "PLL1 lock lost")
    field(ZRVL, 0)
    field(ZRST, "Lock OK")
    field(ONVL, 1)
    field(ONST, "Lock recovered")
    field(TWVL, 2)
    field(TWST, "Lock failed")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) PLL1_lock_lost")
    field(PINI, "YES")
}

record(mbbi, "$(P):PLL2_LOCK_LOST") {
    field(DESC, "PLL2 lock lost")
    field(ZRVL, 0)
    field(ZRST, "Lock OK")
    field(ONVL, 1)
    field(ONST, "Lock recovered")
    field(TWVL, 2)
    field(TWST, "Lock failed")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) PLL2_lock_lost")
    field(PINI, "YES")
}

record(longin, "$(P):FREQUENCYDESCREPANCY") {
    field(DESC, "Reference frequency discrepancy")
    field(EGU,  "Hz")
    field(HIHI, "1000")
    field(HIGH, "500")
    field(SCAN, "1 second")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) frequencyDescrepancy")
    field(PINI, "YES")
}

record(ai, "$(P):SAMPRATE") {
    field(DESC, "Sample rate")
    field(EGU,  "Hz")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT):$(INFO), 0) SampRate")
    field(PINI, "YES")
}

record(ai, "$(P):SAMPRATEDEC") {
    field(DESC, "Sample rate with decimation")
    field(EGU, "Hz")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT):$(INFO), 0) SampRateDec")
    field(PINI, "YES")
}

record(longin, "$(P):BYTESPERSAMPLE") {
    field(DESC, "Number of bytes per sample")
    field(EGU, "b/Samp")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) BytesPerSample")
    field(PINI, "YES")
}

record(mbbi, "$(P):BUSTYPE") {
    field(DESC, "Bus type")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) BusType")
    field(ZRVL, "0")
    field(ZRST, "PCIe")
    field(ONVL, "1")
    field(ONST, "PCIe Lite")
    field(TWVL, "2")
    field(TWST, "USB2")
    field(THVL, "3")
    field(THST, "USB3")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

record(longin, "$(P):BUSADDR") {
    field(DESC, "Bus address")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) BusAddr")
    field(PINI, "YES")
}

record(longin, "$(P):PCIELINKWID") {
    field(DESC, "PCIe link width")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) PCIeLinkWid")
    field(EGU,  "lanes")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

record(longin, "$(P):PCIELINKRATE") {
    field(DESC, "PCIe link rate")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT):$(INFO), 0) PCIeLinkRate")
    field(EGU,  "(gen)")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

